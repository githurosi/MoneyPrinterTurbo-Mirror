name: 同步资产与更新日志
on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 1 * * *" # 每天凌晨1点运行（UTC+8）
  workflow_dispatch:
    inputs:
      force_update:
        description: '是否强制更新（忽略版本检查）'
        required: false
        default: 'false'

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      new_version: ${{ steps.update.outputs.new_version }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: repo  # 检出到独立目录，避免文件冲突

      - name: 安装依赖（下载/翻译/解析工具）
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget jq translate-shell unzip

      - name: 下载最新资产（RELEASE/DEBUG版本）
        id: download-assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          REPO_OWNER="acidanthera"
          REPO_NAME="OpenCorePkg"
          TARGET_PATH="repo/assets"  # 资产存储目录
          mkdir -p "$TARGET_PATH"

          # 获取最新Release信息
          response=$(curl -s https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/latest)
          TAG_NAME=$(echo "$response" | jq -r '.tag_name')
          ASSETS=($(echo "$response" | jq -r '.assets[].name'))  # 获取所有资产名称

          # 下载RELEASE和DEBUG版本资产（假设资产名包含RELEASE/DEBUG标识）
          for asset in "${ASSETS[@]}"; do
            if [[ "$asset" =~ "RELEASE.zip" || "$asset" =~ "DEBUG.zip" ]]; then
              DOWNLOAD_URL=$(echo "$response" | jq -r ".assets[] | select(.name == \"$asset\") | .browser_download_url")
              wget -q --show-progress "$DOWNLOAD_URL" -O "$TARGET_PATH/$asset"
              echo "已下载资产: $asset"
            fi
          done

          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: 检查并更新日志
        id: update-log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          FORCE_UPDATE=${{ github.event.inputs.force_update || 'false' }}
          LOCAL_VERSION=$(cat repo/version.txt 2>/dev/null || echo "")
          REPO_OWNER="acidanthera"
          REPO_NAME="OpenCorePkg"
          TARGET_PATH="repo"

          log() {
            local level=$1
            shift
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $@"
          }

          log "INFO" "开始同步 $REPO_OWNER/$REPO_NAME 日志..."
          log "DEBUG" "本地版本: ${LOCAL_VERSION:-无}"

          # 获取最新Release信息
          REPO_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases"
          response=$(curl -s --retry 3 \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$REPO_URL")

          TAG_NAME=$(echo "$response" | jq -r '.[0].tag_name')
          RELEASE_NOTES=$(echo "$response" | jq -r '.[0].body')
          log "INFO" "最新版本: $TAG_NAME"

          # 判断是否需要更新
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
            log "INFO" "已是最新版本，无需更新日志"
            echo "new_version=$LOCAL_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 翻译并格式化日志
          TRANSLATED_NOTES=$(echo "$RELEASE_NOTES" | trans -b -e google -t zh-CN)
          FORMATTED_NOTES=$(echo "$TRANSLATED_NOTES" | sed 's/^/  - /')  # 转换为Markdown列表

          # 更新版本文件与日志
          echo "$TAG_NAME" > "$TARGET_PATH/version.txt"
          echo "$TRANSLATED_NOTES" > "$TARGET_PATH/changelog.md"

          # 追加日志到README
          echo -e "\n## 📅 更新日志" >> "$TARGET_PATH/README.md"
          echo -e "### $TAG_NAME\n$FORMATTED_NOTES" >> "$TARGET_PATH/README.md"
          log "INFO" "日志更新完成，新版本: $TAG_NAME"

          echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: 提交所有更改（资产+日志）
        if: always()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: repo/  # 提交目标目录下的所有更改
          commit_message: |
            🔄 同步 ${{ steps.download-assets.outputs.TAG_NAME }} 资产与日志
            资产更新: ${{ join(github.event.inputs.force_update && '强制更新, ' || '', steps.download-assets.outputs.ASSETS || '无') }}
            日志摘要: $(cat repo/changelog.md | head -n 2 | sed 's/^/    /')
          branch: main
          file_pattern: |
            repo/assets/*.zip  # 资产压缩包
            repo/version.txt   # 版本文件
            repo/changelog.md  # 完整日志
            repo/README.md     # 主页日志
